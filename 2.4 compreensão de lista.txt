ghci> [x*2 | x <- [1..10]] //pega todo numero de 1 a 10 e multiplica por 2
[2,4,6,8,10,12,14,16,18,20]

------------------------------------------------
ghci> [x*2 | x <- [1..10], x*2 >= 12] //pega todo x de 1 a 10, cujo x*2 seja >= 12 e multiplica x*2. 
[12,14,16,18,20] 

//esse x*2>=12, eh chamado de predicado, que haje como um filtro, pois os valores so sao jogados na funcao (expressao antes do |) 
//se todos os predicados retornarem true. 
//podemos colocar varios predicados, basta separa-los com virgula
------------------------------------------------
boomBangs xs = [ if x < 10 then "BOOM!" else "BANG!" | x <- xs, odd x]

ghci> boomBangs [7..13]  
["BOOM!","BOOM!","BANG!","BANG!"]

//odd retorna True quando o número for ímpar e False quando for par.
//even retorna True quando o número for par e False quando for ímpar.
//boomBangs substitui cada número ímpar maior do que 10 com "BANG!" e cada número ímpar menor do que 10 com "BOOM!".
//se o número não for ímpar, queremos ele fora da lista. 
------------------------------------------------

ghci> [ x*y | x <- [2,5,10], y <- [8,10,11]]  
[16,20,22,40,50,55,80,100,110]

ghci> let xxs = [[1,3,5,2,3,1,2,4,5],[1,2,3,4,5,6,7,8,9],[1,2,4,2,1,6,3,1,3,2,3,6]]  
ghci> [ [ x | x <- xs, even x ] | xs <- xxs]  
[[2,2,4],[2,4,6,8],[2,4,2,6,2,6]]

removeNonUppercase st = [ c | c <- st, c 'elem' ['A'..'Z']]
ghci> removeNonUppercase "EUnaoGOSTODEGATOS"  
"EUGOSTODEGATOS" 